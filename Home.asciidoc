= Huami Web API Documents for Developers
Huami Tech <develop@huami.com>
:toc: left
:toclevels: 4
:toc-placement!:
:doctype: book
:icons: font
:source-highlighter: highlightjs

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

http://www.huami.com/[Huami] provides Web API for accessing user activity data tracked with Huami wearable-devices. Anyone can develop an application to access user's data on their behalf, as long as the user has granted consent to do so.

toc::[]

== 1. Overview

Welcome to the Huami API document.

Huami is the second largest manufacturer of wearables in the world. Our mission is to seamlessly connect our biomechanical signals and daily activities with smart data services to promote an active and healthy lifestyle while making our lives easier. 

We'd like to help developers build their own services by accessing user activity data tracked with our wearables (include Mi Band series, Amazfit ARC / PACE / EQUATOR / MOONBEAM).

== 2. App Registration

Typically you need to provide information about an application such as:

. Application name
. An icon for the application

. URL to the application’s home page
. A short description of the application
. A link to the application’s privacy policy
. A list of redirect URIs

=== Redirect URIs

Redirect URIs are a critical part of the OAuth flow. After a user successfully authorizes an application, the authorization server will redirect the user back to the application with either an authorization code or access token in the URL. Because the redirect URI will contain sensitive information, it is critical that the service doesn’t redirect the user to arbitrary locations

=== Scopes

|====
|Scope|Description

|profile
|The profile scope is the basic user information

|activity
|The activity scope includes activity data, such as steps, distance, calories consumed, and active minutes

|sleep
|The sleep scope includes sleep logs and related sleep analysis, such as the sleep start time, wake time, the duration of sleep

|heartrate
|The heartrate scope includes the continuous heart rate data and related analysis

|motion
|The motion scope includes the active,sleep and related analysis data in minutes, every day has a data section, a section contains 1440(total minutes of one day)*3 bytes

|====

== 3. Authentication

=== Obtaining User Consent and Tokens (SDK for Native Mobile App)

=== Obtaining User Consent and Tokens (API for Web Site)

==== Authorization Code Grant Flow
==== Implicit Grant Flow
==== Authorization Page
==== Huami OAuth Error Code

|====
|Http Status|code|message

|401
|0
|invalid token

|400
|-1001
|Error parameter

|400
|-1002
|Missing required parameter

|500
|-1003
|Internal server error

|400
|-1004
|Invalid parameter

|404
|-2001
|Not found

|400
|-2002
|Bad request

|====

=== Making Requests

To make a request to the HuaMi Data API using OAuth 2.0, simply add an Authorization header to the HTTP request with the user's access token.

*Example Request:*

[source,http,options="wrap"]
----
GET https://api-open.huami.com/users/-/profile
Authorization: Bearer TAQABAAAAAJ95lT4WrRdWtG3hog/0QvXTnUpL3FFxKOLBgm4JjIKJbSozXYxtltsQzBz0Z9PXDiIKBUOLMfjWX5Je6tGEdXLeaYeCEVS0dVYMWG+p+Y7avcVe0SWY4jITNGfuq/tlNLK9cACSkIW/L6Mnb9YNp4CzQDo7dU9WrxK87aOJ7gAlE4leZKeCM3+xLY3zRs3BGZEwrsCmEMqPr14rrD2KHny6aD2UvGQfXdVGVExe8jRbMLw2L2KdRWrxEW7vZRzXdw==
----

=== Access Token Request

*Request structure*

[source,http,options="nowrap"]
----
POST /oauth2/access_token HTTP/1.1
Accept: application/json
Content-Type: application/x-www-form-urlencoded
Host: account.huami.com

client_id=clientId&client_secret=clientSecret&grant_type=refresh_token&redirect_uri=http%3A%2F%2Fwww.baidu.com&code=code
----

*Request parameters*

|===
|Parameter|Mandatory|Description

|`client_id`
|`Yes`
|Application ID issued by HuaMi when registered application

|`client_secret`
|`Yes`
|Application Secret

|`grant_type`
|`Yes`
|The grant_type parameter must be set to 'authorization_code'

|`redirect_uri`
|`Yes`
|This is the URI to which you want the user to be redirected after the authorization is complete. This must match the redirect URI that you have previously registered with the service

|`code`
|`Yes`
|Authorization Code

|===

*Example response*

[source,http,options="nowrap"]
----
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Content-Length: 617

{"access_token":"TAQABAAAAAJ95lT4WrRdWtG3hog/0QvXTnUpL3FFxKOLBgm4JjIKJbSozXYxtltsQzBz0Z9PXDiIKBUOLMfjWX5Je6tGEdXLeaYeCEVS0dVYMWG+p+Y7avcVe0SWY4jITNGfuq/tlNLK9cACSkIW/L6Mnb9YNp4CzQDo7dU9WrxK87aOJ7gAlE4leZKeCM3+xLY3zRs3BGZEwrsCmEMqPr14rrD2KHny6aD2UvGQfXdVGVExe8jRbMLw2L2KdRWrxEW7vZRzXdw==","token_type":"Bearer","expires_in":43200,"refresh_token":"TAQEBAAAAAC7iIWnqI4uE6UgCUiBRg887o9H48QS3IhW5b8c4aJQtyn2ED73TeJKxhWhxVg5+e5lM8Gv5il9FWbQjG5rDKCVnLZ2VGxqrcj6pcAXrLmOQeTePl9dF507jX3awUjQ9RIi7PQhD5MzOlvNIciBhy6hrxU2u5pLt0uTWTJC36blvkwAmdZXQwIpxz2cJPfgTKWGGM1v4IT8uWkYRMWnvYUWOXoPvubp7MRRdVPyngtcbq3aAYCMMmbHilZs8x/jALQ=="}
----

*Response fields*

|===
|Path|Type|Description

|`access_token`
|`String`
|Access token

|`token_type`
|`String`
|Token type

|`expires_in`
|`Number`
|Expire at some time stamp, UNIX time stamp(seconds)

|`refresh_token`
|`String`
|Refresh token, used to refresh access token

|===

*CURL request*

[source,bash]
----
$ curl 'https://account.huami.com/oauth2/access_token' -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/x-www-form-urlencoded' -d 'client_id=clientId&client_secret=clientSecret&grant_type=refresh_token&redirect_uri=http%3A%2F%2Fwww.baidu.com&code=code'
----

=== Refreshing Tokens

*Request structure*

[source,http,options="nowrap"]
----
POST /oauth2/refresh_token HTTP/1.1
Authorization: Bearer TAQEBAAAAAC7iIWnqI4uE6UgCUiBRg887o9H48QS3IhW5b8c4aJQtyn2ED73TeJKxhWhxVg5+e5lM8Gv5il9FWbQjG5rDKCVnLZ2VGxqrcj6pcAXrLmOQeTePl9dF507jX3awUjQ9RIi7PQhD5MzOlvNIciBhy6hrxU2u5pLt0uTWTJC36blvkwAmdZXQwIpxz2cJPfgTKWGGM1v4IT8uWkYRMWnvYUWOXoPvubp7MRRdVPyngtcbq3aAYCMMmbHilZs8x/jALQ==
Accept: application/json
Content-Type: application/x-www-form-urlencoded
Host: account.huami.com

client_id=2882303761517363510&client_secret=gwsORlhbQn1MpWheXJJx2w%3D%3D&grant_type=refresh_token
----

*Request headers*

|===
|Name|Description

|`Authorization`
|Auth credentials,The format should be assigned 'Bearer refresh_token'

|===

*Request parameters*

|===
|Parameter|Mandatory|Description

|`client_id`
|`Yes`
|Application ID issued by HuaMi when registered application

|`client_secret`
|`Yes`
|Application Secret

|`grant_type`
|`Yes`
|The grant_type parameter must be set to 'refresh_token'

|===

*Example response*

[source,http,options="nowrap"]
----
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Content-Length: 617

{"access_token":"TAQABAAAAAJ95lT4WrRdWtG3hog/0QvXTnUpL3FFxKOLBgm4JjIKJbSozXYxtltsQzBz0Z9PXDiIKBUOLMfjWX5Je6tGEdXLeaYeCEVS0dVYMWG+p+Y7avcVe0SWY4jITNGfuq/tlNLK9cACSkIW/L6Mnb9YNp4CzQDo7dU9WrxK87aOJ7gAlE4leZKeCM3+xLY3zRs3BGZEwrsCmEMqPr14rrD2KHny6aD2UvGQfXdVGVExe8jRbMLw2L2KdRWrxEW7vZRzXdw==","token_type":"Bearer","expires_in":43200,"refresh_token":"TAQEBAAAAAC7iIWnqI4uE6UgCUiBRg887o9H48QS3IhW5b8c4aJQtyn2ED73TeJKxhWhxVg5+e5lM8Gv5il9FWbQjG5rDKCVnLZ2VGxqrcj6pcAXrLmOQeTePl9dF507jX3awUjQ9RIi7PQhD5MzOlvNIciBhy6hrxU2u5pLt0uTWTJC36blvkwAmdZXQwIpxz2cJPfgTKWGGM1v4IT8uWkYRMWnvYUWOXoPvubp7MRRdVPyngtcbq3aAYCMMmbHilZs8x/jALQ=="}
----

*Response fields*

|===
|Path|Type|Description

|`access_token`
|`String`
|Access token

|`token_type`
|`String`
|Token type

|`expires_in`
|`Number`
|Expire at some time stamp, UNIX time stamp(seconds)

|`refresh_token`
|`String`
|Refresh token, used to refresh access token

|===

*CURL request*

[source,bash]
----
$ curl 'https://account.huami.com/oauth2/refresh_token' -i -X POST -H 'Authorization: Bearer TAQEBAAAAAC7iIWnqI4uE6UgCUiBRg887o9H48QS3IhW5b8c4aJQtyn2ED73TeJKxhWhxVg5+e5lM8Gv5il9FWbQjG5rDKCVnLZ2VGxqrcj6pcAXrLmOQeTePl9dF507jX3awUjQ9RIi7PQhD5MzOlvNIciBhy6hrxU2u5pLt0uTWTJC36blvkwAmdZXQwIpxz2cJPfgTKWGGM1v4IT8uWkYRMWnvYUWOXoPvubp7MRRdVPyngtcbq3aAYCMMmbHilZs8x/jALQ==' -H 'Accept: application/json' -H 'Content-Type: application/x-www-form-urlencoded' -d 'client_id=2882303761517363510&client_secret=gwsORlhbQn1MpWheXJJx2w%3D%3D&grant_type=refresh_token'
----

=== Token Life Cycle

== 4. Accessing Data

=== User

=== Activity

=== Sleep

=== Heartbeat

=== Motion in Minutes

== 5. Subscriptions
Subscription notification is a near real-time solution to allow third-party applications to be notified when certain event happpens on Huami users. Your applications can listen and wait to receive the lastest user state-changed events, rather than constantly polling on user data.

This is a complementary technology to calling Web API. The content in notifications may not have all information your application needs. In that case, you application must make appropriate Web API calls to retrieve the actual data, see <<4. Accessing Data>>. Also, for many reasons, notifications do *NOT guarantee* 100% delivery success rate. Your application design should accommodate that, e.g. retrieve user data, periodically or when your application being brought to foreground.

Notifications are essentially HTTP requests made by Huami to a URI you registered. Thus you will implement a service behind the URI, to process incoming requests and to interpret the event content inside.

To receive notification, your application also needs to obtain user consent, see <<3. Authentication>>. Huami does NOT send you the notifications of users whose consent is NOT current. Similarly, only data types of the scopes allowed by the user will be sent.

=== Implementing Subscription Web API
You can choose any modern Web technology to implement your service, following the API definition below.

*Request structure*

[source,http,options="nowrap"]
----
----

*Request parameters*

|===
|Parameter|Mandatory|Description

|`userId`
|`Yes`
|The ID of user whose state or data has changed.

|`eventType`
|`Yes`
|The state-changed event name. For example, fellAsleep, activityUpdated.

|`eventTime`
|`Yes`
|The time of event occurred.

|`resourceTime`
|`No`
|The datetime of changed resource data. Use this to determine the time span parameters when retrieving the actual data.

|===

*Response structure*
Your service must respond HTTP Code *204 No Content*, as an aknowledgement to a successful notification delivery.

[source,http,options="nowrap"]
----
----

*CURL request*

[source,bash]
----
----

==== Design for High Availabity and Low Latency
Your service should respond as soon as possible. Store received events locally and process them later asynchorously. If your service cannot respond in *two seconds*, Huami will mark your service as _failed to respond_. Huami will retry three times in one minute, and eventually stop your subscription without warning.

==== HTTPS Only
To provent user data from being compromised on Internet trafic, Huami always sends HTTPS requests to default port 443. You must register a URI starting with [underline]##HTTPS://##.

CAUTION: Self-signed certificates are not supported.

==== Verifying the Request
Huami puts a *_Huami-Signature_* header in every request for security. Your service must verify the imcoming requests have not been tampered. Signature verfication success proves the content of the request is indeed generated by Huami. 

NOTE: Attachers may resend or playback the request if they ever captured the request payload. Your service should handle those repeated requests, just like the same notification has been delivered more than once.

===== Huami-Signature
Signature is computed from the notification request payload using your OAuth client secret. The standard HMAC-SHA1 algorithm is used for hashing. The hashed value will be BASE64 encoded and then URL encoded. Pseudo code: 

[source,]
----
Url.encode(
  Base64.encode(
    SHA1.hash(request.payload + clientSecret)))
----

Your service computes the signature in the same way as Huami did, and verifies the output string equals to the value of *_Huami-Signature_* header. If the computed signature does not match the one in request header, your service should stop processing that notification.

=== Registering Subscription
Once you have completed your service code and deployed it on production environment, see <<2. App Registration>> to register the URI. You are all set.

== 6. Help